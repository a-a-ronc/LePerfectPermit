import OpenAI from "openai";
import { generateCoverLetterDocx } from "./docxGenerator";

// Initialize OpenAI client
let openai: OpenAI | null = null;
try {
  if (process.env.OPENAI_API_KEY) {
    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  }
} catch (error) {
  console.warn("OpenAI client initialization failed:", error);
}

// Known building departments for fallback
const buildingDepartments: Record<string, string> = {
  "West Valley City": "3600 S Constitution Blvd, West Valley City, UT 84119",
  // Add more municipalities here as needed
};

function resolveJurisdictionAddress(jurisdiction: string): string {
  return buildingDepartments[jurisdiction] || "Municipal Building Department";
}

function cleanProjectName(name: string): string {
  return name.replace(/\s*-\s*\w{2,4}$/i, "").trim();
}

function formatDocumentCategory(category: string): string {
  return category
    .split("_")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
}

export async function generateCoverLetterWithAI(
  project: any,
  documents: any[],
  municipality: string = "local municipality",
  user?: { email?: string; phone?: string }
): Promise<string> {
  try {
    if (!process.env.OPENAI_API_KEY || !openai) {
      console.log("Using template-based cover letter generation (no OpenAI API key available)");
      return generateTemplateCoverLetter(project, documents);
    }

    const cleanName = cleanProjectName(project.name);
    const address = project.jurisdictionAddress || resolveJurisdictionAddress(project.jurisdiction);

    const documentByCategory: Record<string, string[]> = {};
    documents.forEach(doc => {
      const category = formatDocumentCategory(doc.category);
      if (!documentByCategory[category]) {
        documentByCategory[category] = [];
      }
      documentByCategory[category].push(doc.fileName);
    });

    const desiredOrder = [
      "Site Plan",
      "Facility Plan",
      "Egress Plan",
      "Structural Plans",
      "Commodities Form",
      "Fire Protection",
      "Special Inspection"
    ];

    const prompt = `
You are an expert permit specialist at Intralog, writing a formal cover letter for a High-Piled Storage Permit application.

Generate a professional cover letter using the following project information:

Project Name: ${cleanName}
Client/Customer Name: ${project.clientName || "Our client"}
Permit Number: ${project.permitNumber || "To be assigned"}
Facility Address: ${project.facilityAddress || "the project location"}
Building Department: ${project.jurisdiction || municipality} Building Department
Building Department Address: ${address}
Project Description: High-piled storage facility permit application

FOLLOW THIS EXACT TEMPLATE STRUCTURE:

Intralog Permit Services

${new Date().toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" })}

${project.jurisdiction || municipality} Building Department  
${address}  
${project.jurisdiction || municipality}

Subject: High-Piled Storage Permit Application Submission for ${cleanName}

Dear ${project.jurisdiction || municipality} Plan Review Team,

I am writing on behalf of Intralog Permit Services to formally submit a High-Piled Storage Permit Application for the facility located at ${project.facilityAddress || "the project location"}.

Enclosed is a comprehensive package of documents required for high-piled storage permitting. The following is an index of the submitted items:

---

${desiredOrder.map((cat, i) => {
  const files = documentByCategory[cat] || [];
  return `<b>${i + 1}. ${cat}</b>\n${files.length ? "Files Submitted: " + files.join(", ") : "No files submitted"}`;
}).join("\n\n")}

---

For any questions or further information, please contact:  
Email: ${project.contactEmail || user?.email || "permits@intralog.io"}  
Phone: ${project.contactPhone || user?.phone || "(801) 441-8992"}

We appreciate your time and review of this application and look forward to your feedback.

Sincerely,  
Intralog Permit Services Team

Generated by PainlessPermit™ by Intralog
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 1000,
      temperature: 0.7,
    });

    const result = response.choices[0].message.content || generateTemplateCoverLetter(project, documents);
    return result;
  } catch (error) {
    console.error("Error generating cover letter with AI:", error);
    return generateTemplateCoverLetter(project, documents);
  }
}

// Optional fallback if OpenAI API isn't used
function generateTemplateCoverLetter(project: any, documents: any[]): string {
  const currentDate = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long", 
    day: "numeric"
  });
  
  const cleanName = cleanProjectName(project.name);
  const address = project.jurisdictionAddress || resolveJurisdictionAddress(project.jurisdiction);
  
  const documentByCategory: Record<string, string[]> = {};
  documents.forEach(doc => {
    const category = formatDocumentCategory(doc.category);
    if (!documentByCategory[category]) {
      documentByCategory[category] = [];
    }
    documentByCategory[category].push(doc.fileName);
  });
  
  const desiredOrder = [
    "Site Plan",
    "Facility Plan",
    "Egress Plan", 
    "Structural Plans",
    "Commodities Form",
    "Fire Protection",
    "Special Inspection"
  ];
  
  const indexItems = desiredOrder.map((category, index) => {
    const files = documentByCategory[category] || [];
    const filesList = files.length > 0 ? `Files Submitted: ${files.join(", ")}` : "No files submitted";
    return `${index + 1}. ${category}\n${filesList}`;
  }).join("\n\n");

  return `Intralog Permit Services

${currentDate}

${project.jurisdiction || "Municipal"} Building Department
${address}
${project.jurisdiction || "City"}

Subject: High-Piled Storage Permit Application Submission for ${cleanName}

Dear ${project.jurisdiction || "Municipal"} Plan Review Team,

I am writing on behalf of Intralog Permit Services to formally submit a High-Piled Storage Permit Application for the facility located at ${project.facilityAddress}.

Enclosed is a comprehensive package of documents required for high-piled storage permitting. The following is an index of the submitted items:

---

${indexItems}

---

For any questions or further information, please contact:
Email: ${project.contactEmail || "permits@intralog.io"}
Phone: ${project.contactPhone || "(801) 441-8992"}

We appreciate your time and review of this application and look forward to your feedback.

Sincerely,
Intralog Permit Services Team

Generated by PainlessPermit™ by Intralog`;
}
