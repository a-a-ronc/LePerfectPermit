import PDFDocument from 'pdfkit';

/**
 * Generates a PDF document from the provided cover letter content
 * 
 * @param content The text content for the cover letter
 * @returns Base64 string of the generated PDF
 */
export async function generatePdfFromText(content: string): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      // Create a PDF document
      const doc = new PDFDocument({
        margins: {
          top: 72,
          bottom: 72,
          left: 72,
          right: 72
        },
        info: {
          Title: 'High-Piled Storage Permit Cover Letter',
          Author: 'Intralog Permit Services',
          Subject: 'Permit Application Cover Letter',
          Keywords: 'permit, high-piled storage, application'
        }
      });
      
      // Buffer to store PDF data
      const buffers: Buffer[] = [];
      
      // Collect PDF data chunks
      doc.on('data', (buffer) => buffers.push(buffer));
      
      // When PDF is complete, combine chunks and resolve with base64
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        const base64Data = pdfData.toString('base64');
        resolve(base64Data);
      });
      
      // Add content to the PDF
      doc.font('Helvetica');
      
      // Process the content line by line for better formatting
      const lines = content.split('\n');
      
      let y = 72; // Starting Y position
      
      // Format each line appropriately
      lines.forEach((line, index) => {
        // If this is a blank line, add some extra space
        if (line.trim() === '') {
          y += 12;
          return;
        }
        
        // Check if this line could be a header (not foolproof but helps with formatting)
        if (
          line.toUpperCase() === line && 
          line.trim().length > 0 && 
          line.trim().length < 50 &&
          !line.includes(':')
        ) {
          // It's likely a header
          doc.font('Helvetica-Bold').fontSize(12);
          doc.text(line, 72, y);
          y += 16;
          doc.font('Helvetica').fontSize(10);
        } 
        // Check if this is a section header (with colon)
        else if (line.includes(':') && !line.startsWith('  -')) {
          const parts = line.split(':');
          doc.font('Helvetica-Bold').fontSize(11);
          doc.text(parts[0] + ':', 72, y);
          
          // If there's content after the colon, add it
          if (parts.slice(1).join(':').trim()) {
            doc.font('Helvetica').fontSize(10);
            doc.text(parts.slice(1).join(':').trim(), 72 + doc.widthOfString(parts[0] + ': '), y);
          }
          
          y += 14;
          doc.font('Helvetica').fontSize(10);
        }
        // Check if it's a bullet point
        else if (line.trim().startsWith('-') || line.trim().startsWith('â€¢') || line.startsWith('  -')) {
          doc.font('Helvetica').fontSize(10);
          doc.text(line, 82, y, { indent: 10 });
          y += 14;
        }
        // Regular paragraph text
        else {
          // Set spacing based on position in document
          let spacing = 12;
          
          // If it appears to be a date at the top
          if (index === 0 && line.match(/^\w+ \d+, \d{4}$/)) {
            doc.fontSize(10);
            spacing = 14;
          }
          // If it appears to be the closing ("Sincerely,")
          else if (line.trim() === 'Sincerely,' || line.trim() === 'Regards,' || line.trim() === 'Respectfully,') {
            doc.fontSize(10);
            spacing = 14;
            y += 12; // Add extra space before signature
          }
          // If it appears to be the signature
          else if (line.includes('Permit Services Team') || line.includes('Services')) {
            doc.fontSize(10);
            doc.font('Helvetica-Bold');
            spacing = 16;
          }
          // Regular paragraph text
          else {
            doc.fontSize(10);
          }
          
          doc.text(line, 72, y);
          y += spacing;
          doc.font('Helvetica');
        }
        
        // Check if we need a new page
        if (y > 700) {
          doc.addPage();
          y = 72;
        }
      });
      
      // Add Intralog logo or watermark if needed
      doc.fontSize(8).fillColor('#888888');
      doc.text('Generated by PainlessPermit by Intralog', 72, doc.page.height - 50, {
        align: 'center',
        width: doc.page.width - 144
      });
      
      // Finalize the PDF
      doc.end();
    } catch (error) {
      console.error('Error generating PDF:', error);
      reject(error);
    }
  });
}